version: "3.9"services:  postgres:    image: postgres:latest    container_name: postgres    volumes:      - postgres_storage:/var/lib/postgresql/data    env_file:      - .env    environment:      - POSTGRES_USER=${DATABASE_USER}      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}      - POSTGRES_DB=${DATABASE_NAME}    healthcheck:      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]      interval: 5s      timeout: 5s      retries: 5    ports:      - "5432:5432"  backend:    build:      dockerfile: ./Dockerfile      context: ./    container_name: backend    ports:      - "8000:8000"    volumes:      - static_volume:/app/static      - media_volume:/app/media    depends_on:      postgres:        condition: service_healthy    command: >      bash -c "./manage.py collectstatic --noinput &&       ./manage.py makemigrations users Resume Hackaton Score &&       ./manage.py migrate &&       ./manage.py initadmin &&       ./manage.py runserver 0.0.0.0:8000 &&       gunicorn -b 0.0.0.0:8080 app.wsgi:application"    redis:    image: redis:latest    hostname: redis  worker:    build:      dockerfile: ./Dockerfile      context: ./    hostname: worker    command: celery -A app worker --loglevel=info    volumes:       - celery_volume:/app    env_file:      - .env    environment:      - POSTGRES_USER=${DATABASE_USER}      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}      - POSTGRES_DB=${DATABASE_NAME}    links:      - redis    depends_on:      - redis      - backend      - postgres  celery-beat:    build:      dockerfile: ./Dockerfile    hostname: celery-beat    command: celery -A app beat --loglevel=info    volumes:      - celery_beat_volume:/app    depends_on:      - redis      - backend      - postgres  flower:    build:      dockerfile: ./Dockerfile      context: ./    hostname: flower    command: celery -A app flower --loglevel=info    volumes:      - flower_volume:/app    links:      - redis    depends_on:      - redis      - worker    ports:      - "5555:5555"  nginx:    build:      dockerfile: ./Dockerfile      context: ./.docker/nginx/    container_name: nginx    volumes:      - static_volume:/app/static      - media_volume:/app/media      - /etc/letsencrypt:/etc/letsencrypt    depends_on:      - backend    ports:      - "80:80"      - "443:443"volumes:  static_volume:  media_volume:  postgres_storage:  celery_volume:  celery_beat_volume:  flower_volume: